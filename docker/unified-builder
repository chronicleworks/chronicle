# syntax = docker/dockerfile:1.4
# Copyright (c) 2022-23 Blockchain Technology Partners, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
ARG RUST_VERSION=1.70
ARG CARGO_HOME=.cargo_cached
FROM --platform=${BUILDPLATFORM} rust:${RUST_VERSION} as hostbase
ENV PKG_CONFIG_ALLOW_CROSS=1
ENV OPENSSL_STATIC=true
ENV CARGO_HOME=$CARGO_HOME


RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
  --mount=type=cache,target=/var/lib/apt,sharing=locked \
  apt-get update \
  && apt-get install -y --no-install-recommends \
  build-essential \
  cmake \
  g++-x86-64-linux-gnu \
  g++-aarch64-linux-gnu \
  libpq5 \
  libpq-dev \
  lsb-release \
  protobuf-compiler

RUN rustup target add aarch64-unknown-linux-gnu \
  && rustup target add x86_64-unknown-linux-gnu

WORKDIR /app
RUN useradd -m tester \
  && chown -R tester /app

COPY .cargo /app/.cargo
COPY Cargo.lock /app
COPY .VERSION /app
COPY Cargo.toml /app
COPY crates /app/crates
COPY domain_docs /app/domain_docs
COPY policies /app/policies
COPY docker/chronicle-test/wait-for-it /app/scripts/wait-for-it


FROM hostbase AS crossbuild
ARG TARGETPLATFORM
ARG BUILDPLATFORM
ARG TARGETARCH
ARG BUILD_ARGS
ARG CARGO_HOME

RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
  --mount=type=cache,target=/var/lib/apt,sharing=locked \
  dpkg --add-architecture ${TARGETARCH} \
  && apt-get update \
  && apt-get install -y --no-install-recommends \
  liblzma-dev \
  libpq-dev \
  libssl-dev \
  libzmq3-dev

USER root
RUN --mount=type=cache,target=.cargo_cached/registry,sharing=locked \
    --mount=type=cache,target=./target,sharing=locked \
  mkdir -p /artifacts/${TARGETARCH} \
  && chown -R tester \
  .cargo_cached/registry \
  /app \
  /artifacts

# If we are doing a cross build, then build once on the host architecture
# so we get the build script dependencies compiled and cached
USER tester
RUN --mount=type=cache,target=.cargo_cached/registry,sharing=locked \
    --mount=type=cache,target=./target,sharing=locked \
  if [ "${TARGETPLATFORM}" != "${BUILDPLATFORM}" ]; then \
  if [ "${BUILDPLATFORM}" = "linux/arm64" ]; then \
  export INITIAL_BUILD_TARGET=aarch64-unknown-linux-gnu; \
  elif [ "${BUILDPLATFORM}" = "linux/amd64" ]; then \
  export INITIAL_BUILD_TARGET=x86_64-unknown-linux-gnu; \
  else \
  echo "Unsupported architecture: ${TARGETPLATFORM}"; \
  exit 1; \
  fi \
  && /usr/local/cargo/bin/cargo build --locked --release --target ${INITIAL_BUILD_TARGET} ${BUILD_ARGS} ; \
  fi

# Now we shuffle out the target architecture dev libraries, but
# only if we are targeting other than the host architecture
USER root
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
  --mount=type=cache,target=/var/lib/apt,sharing=locked \
  if [ "${TARGETPLATFORM}" != "${BUILDPLATFORM}" ]; then \
  apt-get remove -y \
  liblzma-dev \
  libpq-dev \
  libssl-dev \
  libzmq3-dev \
  && apt-get update \
  && apt-get install -y --no-install-recommends \
  liblzma-dev:${TARGETARCH} \
  libpq-dev:${TARGETARCH} \
  libssl-dev:${TARGETARCH} \
  libzmq3-dev:${TARGETARCH} ; \
  fi

RUN --mount=type=cache,target=.cargo_cached/registry,sharing=locked \
    --mount=type=cache,target=./target,sharing=locked \
  mkdir -p /artifacts/${TARGETARCH} \
  && chown -R tester \
  .cargo_cached/registry

# Finally we build the target architecture binaries
# If our target is the host architecture, then this is the
# first build, otherwise it is the second
USER tester
RUN --mount=type=cache,target=.cargo_cached/registry,sharing=locked \
    --mount=type=cache,target=./target,sharing=locked \
  mkdir -p /artifacts/${TARGETARCH} \
  && if [ "${TARGETPLATFORM}" = "linux/arm64" ]; then \
  export CARGO_BUILD_TARGET=aarch64-unknown-linux-gnu; \
  elif [ "${TARGETPLATFORM}" = "linux/amd64" ]; then \
  export CARGO_BUILD_TARGET=x86_64-unknown-linux-gnu; \
  else \
  echo "Unsupported architecture: ${TARGETPLATFORM}"; \
  exit 1; \
  fi \
  && CARGO_HOME=.cargo_cached /usr/local/cargo/bin/cargo build --locked --release --target ${CARGO_BUILD_TARGET} ${BUILD_ARGS} \
  && for i in chronicle chronicle_sawtooth_tp chronicle-domain-lint opactl opa-tp oauth-token gq-ws; \
  do mv -f target/${CARGO_BUILD_TARGET}/release/$i /artifacts/${TARGETARCH}; \
  done


FROM crossbuild AS testbase

USER root
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
  --mount=type=cache,target=/var/lib/apt,sharing=locked \
  curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add - \
  && echo "deb [arch=$(dpkg --print-architecture)] https://download.docker.com/linux/debian \
  $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list \
  && apt-get update -y \
  && apt-get install -y --no-install-recommends \
  docker-ce-cli


FROM testbase AS test

# Test on the host only
WORKDIR /app

USER tester


FROM --platform=${TARGETPLATFORM} rust:${RUST_VERSION} as artifacts
COPY --from=crossbuild /artifacts /artifacts


FROM --platform=${TARGETPLATFORM} rust:${RUST_VERSION} as chronicle-builder
ARG TARGETARCH

ENV PKG_CONFIG_ALLOW_CROSS=1
ENV OPENSSL_STATIC=true

RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
  --mount=type=cache,target=/var/lib/apt,sharing=locked \
  apt-get update \
  && apt-get install -y --no-install-recommends \
  build-essential \
  cmake \
  libpq-dev \
  libssl-dev \
  libzmq3-dev \
  protobuf-compiler

COPY --from=artifacts /artifacts/${TARGETARCH}/chronicle-domain-lint /usr/local/bin

COPY .VERSION /app/.VERSION
COPY .cargo /app/.cargo
COPY Cargo.lock /app
COPY Cargo.toml /app
COPY crates /app/crates
COPY domain_docs /app/domain_docs
COPY policies /app/policies
COPY docker/chronicle-test/wait-for-it /app/scripts/wait-for-it

WORKDIR /app
RUN /usr/local/cargo/bin/cargo fetch --locked


FROM --platform=${TARGETPLATFORM} debian:bookworm-slim AS debian-upgraded

RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
  --mount=type=cache,target=/var/lib/apt,sharing=locked \
  apt-get update \
  && apt-get upgrade -y

FROM debian-upgraded AS final-base
ARG TARGETARCH

RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
  --mount=type=cache,target=/var/lib/apt,sharing=locked \
  apt-get update \
  && apt-get install -y --no-install-recommends \
  ca-certificates \
  libpq5

VOLUME /var/lib/chronicle
RUN groupadd -g 999 chronicle && \
  useradd -m -r -u 999 -g chronicle chronicle
RUN mkdir -p /var/lib/chronicle \
  && chown -R chronicle:chronicle /var/lib/chronicle \
  && chmod 755 /var/lib/chronicle

WORKDIR /

# Copy untyped chronicle to image
FROM final-base AS chronicle
ARG TARGETARCH

COPY --from=artifacts /artifacts/${TARGETARCH}/chronicle /usr/local/bin
RUN chmod 755 /usr/local/bin/chronicle \
  && chown root:bin /usr/local/bin/chronicle

USER chronicle

# Copy tp to image
FROM final-base AS chronicle-tp
ARG TARGETARCH

COPY --from=artifacts /artifacts/${TARGETARCH}/chronicle_sawtooth_tp /usr/local/bin
RUN chmod 755 /usr/local/bin/chronicle_sawtooth_tp \
  && chown root:bin /usr/local/bin/chronicle_sawtooth_tp

USER chronicle

# Copy opa-tp to image
FROM final-base AS opa-tp
ARG TARGETARCH

COPY --from=artifacts /artifacts/${TARGETARCH}/opa-tp /usr/local/bin/opa-tp
COPY --from=chronicle-builder /app/scripts/wait-for-it /usr/local/bin/wait-for-it
RUN chmod 755 /usr/local/bin/opa-tp \
  && chown root:bin /usr/local/bin/opa-tp
RUN chmod 755 /usr/local/bin/wait-for-it \
  && chown root:bin /usr/local/bin/wait-for-it

USER chronicle

# Copy opactl to image
FROM final-base AS opactl
ARG TARGETARCH

COPY --from=artifacts /artifacts/${TARGETARCH}/opactl /usr/local/bin/opactl
COPY --from=chronicle-builder /app/policies/bundle.tar.gz /app/policies/bundle.tar.gz
COPY --from=chronicle-builder /app/scripts/wait-for-it /usr/local/bin/wait-for-it
RUN chmod 755 /usr/local/bin/opactl \
  && chown root:bin /usr/local/bin/opactl
RUN chmod 755 /usr/local/bin/wait-for-it \
  && chown root:bin /usr/local/bin/wait-for-it

USER chronicle

# Build the id-provider image
FROM debian-upgraded AS auth-server-requirements

RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
  --mount=type=cache,target=/var/lib/apt,sharing=locked \
  apt-get update \
  && apt-get install --no-install-recommends -y \
  curl \
  openjdk-17-jre-headless

FROM hostbase AS auth-server-artifacts
ARG UID=1001

USER root
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
  --mount=type=cache,target=/var/lib/apt,sharing=locked \
  apt-get update \
  && apt-get install --no-install-recommends -y \
  git \
  maven \
  openjdk-17-jdk-headless

RUN useradd -u ${UID} -m builder
USER builder
RUN mkdir /home/builder/.m2/ /home/builder/fake-oidc-server/
WORKDIR /home/builder/fake-oidc-server/

RUN git init
RUN git remote add origin https://github.com/CESNET/fake-oidc-server.git
RUN git fetch origin 586a884d217e1eee7be2cc5951907745d4112165
RUN git reset --hard FETCH_HEAD
COPY docker/id-provider-settings.yml src/main/resources/application.yml
RUN --mount=type=cache,target=/home/builder/.m2,sharing=locked,uid=${UID} \
  mvn -B package

FROM auth-server-requirements AS id-provider
ARG TARGETARCH

RUN useradd -m runner
USER runner

COPY --from=artifacts /artifacts/${TARGETARCH}/oauth-token /usr/local/bin/
COPY --from=auth-server-artifacts /home/builder/fake-oidc-server/target/fake_oidc_server.jar /home/runner/

CMD java -jar ~/fake_oidc_server.jar

EXPOSE 8090

# Build the chronicle-helm-api-test image
FROM debian-upgraded AS chronicle-helm-api-test
ARG TARGETARCH

RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
  --mount=type=cache,target=/var/lib/apt,sharing=locked \
  apt-get update \
  && apt-get install --no-install-recommends -y \
  ca-certificates \
  curl \
  jq \
  wait-for-it

RUN curl -fsLOS https://deb.nodesource.com/setup_lts.x \
  && bash ./setup_lts.x \
  && apt-get install -y nodejs \
  && npm install -g -f graphqurl --yes \
  && rm -f ./setup_lts.x

COPY --from=artifacts /artifacts/${TARGETARCH}/gq-ws /usr/local/bin/
COPY docker/helm-api-subscribe-submit-test /usr/local/bin/subscribe-submit-test

CMD /usr/local/bin/subscribe-submit-test