fullnameOverride: bootnode
image:
  repository: ${chronicle_node_repository}
  tag: local
  pullPolicy: IfNotPresent
  debug: true
podAnnotations:
  sidecar.opentelemetry.io/inject: "true"
  vault.hashicorp.com/ca-cert: '/var/run/secrets/kubernetes.io/serviceaccount/ca.crt'
  vault.hashicorp.com/agent-inject-template-bootnode_key: '{{ with secret "kv/chronicle-substrate/bootnode_key" }}{{ .Data.data.key }}{{ end }}'
  vault.hashicorp.com/agent-inject-template-bootnode_peer: '{{ with secret "kv/chronicle-substrate/bootnode_peer" }}{{ .Data.data.peer_id }}{{ end }}'
node:
  chain: chronicle
  customChainspec: true
  role: authority
  replicas: 1
  command: node-chronicle
  logLevels:
    - info
    - wasmtime_cranelift=info
    - wasmtime_jit=info
  chainData:
    pruning: archive
    storageClass: ""
  perNodeServices:
    relayP2pService:
      enabled: true
  prometheus:
      enabled: true
  enableSidecarReadinessProbe: false
  enableSidecarLivenessProbe: true
  vault:
    enabled: true
    authRole: admin
    authType: kubernetes
    keys:
      - name: aura
        type: aura
        scheme: sr25519
        vaultPath: kv/chronicle-substrate/aura
        vaultKey: secretSeed
      - name: root
        type: acco
        scheme: sr25519
        vaultPath: kv/chronicle-substrate/root
        vaultKey: secretSeed
      - name: online
        type: onli
        scheme: sr25519
        vaultPath: kv/chronicle-substrate/online
        vaultKey: secretSeed
      - name: gran
        type: gran
        scheme: ed25519
        vaultPath: kv/chronicle-substrate/grankey
        vaultKey: secretSeed
    nodeKey:
      name: bootnode_key
      vaultKey: key
      vaultPath: kv/chronicle-substrate/bootnode_key
  env:
   - name: VAULT_LOG_LEVEL
     value: "debug"
  flags:
    - "--allow-private-ipv4"
    - "--discover-local"

# Generate chainspec, and expose it as url
extraInitContainers:
  - name: chainspec-generator
    image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
    securityContext:
      runAsUser: 0
    command: [ "/bin/bash" ]
    args:
      - -c
      - |
        set -ex
        if [ -f chainspec.json ]; then
          echo "chainspec.json already exists."
          exit 0
        fi
        apt update && apt install -y jq &&
        {{ .Values.node.command }} build-spec --chain {{ .Values.node.chain }} > base.json
        if [ ! -s base.json ]; then
          echo "base.json is empty or missing."
          exit 1
        fi
        BOOTNODE_PEER=$(cat /vault/secrets/bootnode_peer)
        echo "{\"bootNodes\":[\"/dns/bootnode-0/tcp/30333/p2p/$${BOOTNODE_PEER}\"]}" > override1.json
        jq -s '.[0] * .[1]' base.json override1.json | sed 's/1e+18/1000000000000000000/' > plain.json
        if [ ! -s plain.json ]; then
          echo "plain.json is empty or malformed after jq processing."
          exit 1
        fi
        cat plain.json
        cut -c -256 plain.json
        {{ .Values.node.command }} build-spec --chain plain.json --raw > chainspec.json
        if [ ! -s chainspec.json ]; then
          echo "chainspec.json failed to generate."
          exit 1
        fi
        cp chainspec.json {{ .Values.node.customChainspecPath }}
    volumeMounts:
      - mountPath: /chain-data
        name: chain-data
      - mountPath: /keystore
        name: chain-keystore
    env:
    - name: VAULT_LOG_LEVEL
      value: "debug"
extraContainers:
  - name: chainspec
    image: nginxinc/nginx-unprivileged:stable
    ports:
      - containerPort: 8080
        name: web
    volumeMounts:
      - name: chain-data
        subPath: chainspec.json
        mountPath: /usr/share/nginx/html/chainspec.json
        readOnly: true
