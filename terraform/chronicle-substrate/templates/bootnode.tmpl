fullnameOverride: bootnode
image:
  repository: ${chronicle_node_repository}
  tag: local
  pullPolicy: IfNotPresent
node:
  chain: local
  customChainspec: true # see extraInitContainers, chainspec-generator
  role: full
  replicas: 1
  command: node-chronicle
  chainData:
    pruning: archive
    storageClass: ""
  chainKeystore:
    mountInMemory:
      enabled: true
  perNodeServices:
    relayP2pService:
      enabled: true
  vault:
    enabled: false
    keys:
      - name: aura
        type: aura
        scheme: sr25519
        vaultPath: kv/chronicle_substrate/aura # path at which the secret is located in Vault
        vaultKey: secretSeed # key under which the secret value is stored in Vault
        extraDerivation: "//$${HOSTNAME}//aura" # allows to have unique derived keys for each pod of the statefulset
    nodeKey:
      name: bootnode_key
      vaultPath: kv/chronicle-substrate/bootnode_key
      vaultKey: key
  env:
   - name: VAULT_LOG_LEVEL
     value: "debug"

  customNodeKey: ${bootnode_key}
  flags:
    - "--allow-private-ipv4"
    - "--discover-local"

ingress:
  enabled: false
  annotations:
    kubernetes.io/ingress.class: TODO
    external-dns.alpha.kubernetes.io/target: TODO
    cert-manager.io/cluster-issuer: TODO
  rules:
    - host: chronicle-bootnode.paravela.io
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: bootnode
                port:
                  number: 9944
  tls:
    - secretName: chronicle-bootnode.paravela.io
      hosts:
        - chronicle-bootnode.paravela.io

# Generate chainspec, and expose it as url
extraInitContainers:
  - name: chainspec-generator
    image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
    annotations:
      vault.hashicorp.com/agent-inject: "true"
      vault.hashicorp.com/role: 'bootnode'
      vault.hashicorp.com/agent-inject-secret-bootnode_key: 'kv/chronicle_substrate/bootnode_key'
      vault.hashicorp.com/agent-inject-secret-bootnode_peer: 'kv/chronicle_substrate/bootnode_peer'
    securityContext:
      runAsUser: 0
    command: [ "/bin/bash" ]
    args:
      - -c
      - |
        apt update && apt install -y jq &&
        {{ .Values.node.command }} build-spec --chain {{ .Values.node.chain }} > base.json
        if [ ! -s base.json ]; then
          echo "base.json is empty or missing."
          exit 1
        fi
        echo '{"bootNodes":["/dns/bootnode-0/tcp/30333/p2p/12D3KooWRpzRTivvJ5ySvgbFnPeEE6rDhitQKL1fFJvvBGhnenSk"]}' > override1.json
        jq -s '.[0] * .[1]' base.json override1.json | sed 's/1e+18/1000000000000000000/' > plain.json
        if [ ! -s plain.json ]; then
          echo "plain.json is empty or malformed after jq processing."
          exit 1
        fi
        cut -c -256 plain.json
        {{ .Values.node.command }} build-spec --chain plain.json --raw > chainspec.json
        if [ ! -s chainspec.json ]; then
          echo "chainspec.json failed to generate."
          exit 1
        fi
        cp chainspec.json {{ .Values.node.customChainspecPath }}
    volumeMounts:
      - mountPath: /chain-data
        name: chain-data
    env:
    - name: VAULT_LOG_LEVEL
      value: "debug"
extraContainers:
  - name: chainspec
    image: nginxinc/nginx-unprivileged:stable
    ports:
      - containerPort: 8080
        name: web
    volumeMounts:
      - name: chain-data
        subPath: chainspec.json
        mountPath: /usr/share/nginx/html/chainspec.json
        readOnly: true
