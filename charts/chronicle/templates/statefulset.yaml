{{$substrateServiceName := include "lib.call-nested" (list . "node" "common.names.fullname")}}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "common.names.fullname" . }}-chronicle
  labels: {{ include "chronicle.labels" . | nindent 4 }}
    component: chronicle
spec:
  annotations:
    sidecar.opentelemetry.io/inject: "true"
    vault.hashicorp.com/ca-cert: '/var/run/secrets/kubernetes.io/serviceaccount/ca.crt'
    vault.hashicorp.com/agent-inject-template-chronicle: '{{ with secret "kv/chronicle/chronicle_identity" }}{{ .Data.data.secret_seed }}{{ end }}'
    vault.hashicorp.com/agent-inject-template-chronicle-pk: '{{ with secret "kv/chronicle/chronicle_account" }}{{ .Data.data.secret_seed }}{{ end }}'
  replicas: {{ include "chronicle.replicas" . }}
  selector:
    matchLabels: {{ include "chronicle.labels.matchLabels" . | nindent 6 }}
      component: chronicle
  serviceName: {{ include "common.names.fullname" . }}
  template:
    metadata:
      labels: {{ include "chronicle.labels" . | nindent 8 }}
        component: chronicle
    spec:
      serviceAccountName: {{ include "lib.serviceAccountName" . }}
      affinity: {{ include "lib.safeToYaml" .Values.affinity | nindent 8 }}
      containers:
        {{- if .Values.postgres.enabled }}
        - name: postgres
          {{- include "lib.image" (dict "imageRoot" .Values.postgres.image "global" .Values.global ) | nindent 10 }}
          ports:
            - containerPort: {{.Values.postgres.port }}
          resources: {{- include "lib.safeToYaml" .Values.postgres.resources | nindent 12 }}
          env:
            - name: PGDATA
              value: /data/chronicle
            - name: POSTGRES_PASSWORD
              {{- if .Values.postgres.existingPasswordSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.existingPasswordSecret }}
                  key: {{ .Values.postgres.existingPasswordSecretKey }}
              {{- else }}
              value: {{ .Values.postgres.password | quote }}
              {{- end }}
              {{- include "lib.safeToYaml" .Values.postgres.env | nindent 12 }}
          volumeMounts:
            - mountPath: /data
              name: "pgdata"
            {{- include "lib.volumeMounts" .Values.extraVolumeMounts | nindent 12 }}
        {{- end }}
        - name: chronicle
          {{- include "lib.image" (dict "imageRoot" .Values.image "global" .Values.global ) | nindent 10 }}
          ports:
          - containerPort: {{ .Values.port }}
          command: [ "bash", "-c"]
          args:
            - |
              {{ if .Values.auth.required }}
              {{ if and (not .Values.auth.jwks.url) (not .Values.auth.userinfo.url) (not .Values.devIdProvider.enabled) }}
              {{ required "If 'auth.required' you need to provide at least 'auth.jwks.url' or 'auth.userinfo.url', or 'devIdProvider.enabled' must be 'true'!" .Values.auth.jwks.url }}
              {{ end }}
              {{ end }}

              echo "Waiting 20 seconds for postgres to start";
              sleep 20;
              chronicle \
                -c /etc/chronicle/config/config.toml \
                --chronicle-key-from-path /vault/secrets \
                --batcher-key-from-path /vault/secrets
                --console-logging json \
                --substrate grpc://{{  .Values.substrate.address  }}:{{  .Values.substrate.port  }} \
                --remote-database \
                --database-name {{ .Values.postgres.database }} \
                --database-username {{ .Values.postgres.user }} \
                --database-host {{ .Values.postgres.host }} \
                {{- if not .Values.opa.enabled }}
                --embedded-opa-policy \
                {{- end }}
                serve-api \
                  --interface 0.0.0.0:{{ .Values.port }} \
                  {{- if .Values.healthCheck.enabled }}
                  --liveness-check {{ .Values.healthCheck.interval }} \
                  {{- end }}
                  {{ include "chronicle.offer-endpoints" . }}
                  {{- if .Values.auth.required }}
                  --require-auth \
                  {{- end }}
                  {{ include "chronicle.jwks-url.cli" . }}
                  {{ include "chronicle.userinfo-url.cli" . }}
                  {{ include "chronicle.id-claims" . }}
                  ;
          env: {{ include "lib.safeToYaml" .Values.env | nindent 12 }}
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: "localhost:4317"
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: "service.name=chronicle,service.instance.id={{ .Release.Name }}"
            - name: OTEL_PROPAGATORS
              value: "tracecontext,baggage"
            - name: OTEL_TRACES_EXPORTER
              value: "otlp"
            - name: OTEL_LOGS_EXPORTER
              value: "otlp"
            - name: RUST_LOG
              value: {{ .Values.logLevel }}
            - name: PGPASSWORD
              {{- if .Values.postgres.existingPasswordSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgres.existingPasswordSecret }}
                  key: {{ .Values.postgres.existingPasswordSecretKey }}
              {{- else }}
              value: {{ .Values.postgres.password | quote }}
              {{- end }}
            {{- include "lib.safeToYaml" .Values.postgres.env | nindent 12 }}
          resources: {{- include "lib.safeToYaml" .Values.resources | nindent 12 }}
          volumeMounts:
            - name: chronicle-config
              mountPath: /etc/chronicle/config/
            - name: chronicle-secrets
              mountPath: /var/lib/chronicle/secrets/
              readOnly: true
            - name: chronicle-data
              mountPath: /var/lib/chronicle/store/
            {{- include "lib.volumeMounts" .Values.extraVolumeMounts | nindent 12 }}
      volumes:
        - name: chronicle-data
          persistentVolumeClaim:
            claimName: chronicle-data
        - name: chronicle-config
          configMap:
            name: {{ .Release.Name }}-chronicle-config
{{- if not .Values.postgres.persistence.enabled }}
        - name: "pgdata"
          emptyDir: {}
{{- end }}
  volumeClaimTemplates:
    - metadata:
        name: chronicle-data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 6Gi
{{- if .Values.postgres.persistence.enabled }}
    - metadata:
        name: "pgdata"
        annotations: {{- include "lib.safeToYaml" .Values.postgres.persistence.annotations | nindent 10 }}
      spec:
        accessModes: {{- include "lib.safeToYaml" .Values.postgres.persistence.accessModes | nindent 10 }}
        storageClassName: {{ .Values.postgres.persistence.storageClass | quote }}
        resources:
          requests:
            storage: {{ .Values.postgres.persistence.size | quote }}
{{- end }}
